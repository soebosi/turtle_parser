//
// https://www.w3.org/TR/turtle/#sec-grammar-grammar
//
// 6.5 Grammar
//
// The EBNF used here is defined in XML 1.0 [EBNF-NOTATION].
// Production labels consisting of a number and a final 's', e.g. [60s], reference the production with that number in the SPARQL 1.1 Query Language grammar [SPARQL11-QUERY].

whitespace = _{ ws }
comment    = _{ "#" ~ any ~ ("\n" | "\r\n")}

// [1]	turtleDoc	::=	statement*
turtle_doc = { statement* }

// [2]	statement	::=	directive | triples '.'
statement = { directive | (triples ~ ".") }

// [3]	directive	::=	prefixID | base | sparqlPrefix | sparqlBase
directive = { prefix_id | base | sparql_prefix | sparql_base }

// [4]	prefixID	::=	'@prefix' PNAME_NS IRIREF '.'
prefix_id = { "@prefix" ~ pname_ns ~ iriref ~ "." }

// [5]	base	::=	'@base' IRIREF '.'
base = { "@base" ~ iriref ~ "." }

// [5s]	sparqlBase	::=	"BASE" IRIREF
sparql_base = { "BASE" ~ iriref }

// [6s]	sparqlPrefix	::=	"PREFIX" PNAME_NS IRIREF
sparql_prefix = { "PREFIX" ~ pname_ns ~ iriref }

// [6]	triples	::=	subject predicateObjectList | blankNodePropertyList predicateObjectList?
triples = { (subject ~ predicate_object_list) | (blank_node_property_list ~ predicate_object_list?) }

// [7]	predicateObjectList	::=	verb objectList (';' (verb objectList)?)*
predicate_object_list = { verb ~ object_list ~ ( ";" ~ (verb ~ object_list)?)* }

// [8]	objectList	::=	object (',' object)*
object_list = { object ~ ( "," ~ object)* }

// [9]	verb	::=	predicate | 'a'
verb = { predicate | "a" }

// [10]	subject	::=	iri | BlankNode | collection
subject = { iri | blank_node | collection }

// [11]	predicate	::=	iri
predicate = { iri }

// [12]	object	::=	iri | BlankNode | collection | blankNodePropertyList | literal
object = { iri | blank_node | collection | blank_node_property_list | literal }

// [13]	literal	::=	RDFLiteral | NumericLiteral | BooleanLiteral
literal = { rdf_literal | numeric_literal | boolean_literal }

// [14]	blankNodePropertyList	::=	'[' predicateObjectList ']'
blank_node_property_list = { "[" ~ predicate_object_list ~ "]" }

// [15]	collection	::=	'(' object* ')'
collection = { "(" ~ object* ~ ")" }

// [16]	NumericLiteral	::=	INTEGER | DECIMAL | DOUBLE
numeric_literal = {
  double  |
  decimal |
  integer
}

// [128s]	RDFLiteral	::=	String (LANGTAG | '^^' iri)?
rdf_literal = { string ~ ( langtag | "^^" ~ iri )? }

// [133s]	BooleanLiteral	::=	'true' | 'false'
boolean_literal = { "true" | "false" }

// [17]	String	::=	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
string = {
  string_literal_long_quote |
  string_literal_long_single_quote |
  string_literal_single_quote |
  string_literal_quote
}

// [135s]	iri	::=	IRIREF | PrefixedName
iri = { iriref | prefixed_name }

// [136s]	PrefixedName	::=	PNAME_LN | PNAME_NS
prefixed_name = { pname_ln | pname_ns }

// [137s]	BlankNode	::=	BLANK_NODE_LABEL | ANON
blank_node = { blank_node_label | anon }

// Productions for terminals
// [18]	IRIREF	::=	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
iriref = @{ "<" ~ (uchar | (!('\u{00}'..'\u{20}' | "<" | ">" | "\"" | "{" | "}" | "|" | "^" | "`" | "\\") ~ any))* ~ ">" }

// [139s]	PNAME_NS	::=	PN_PREFIX? ':'
pname_ns = @{ pn_prefix? ~ ":" }

// [140s]	PNAME_LN	::=	PNAME_NS PN_LOCAL
pname_ln = @{ pname_ns ~ pn_local }

// [141s]	BLANK_NODE_LABEL	::=	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
// TODO:Fix me
blank_node_label = @{ "_:" ~ ( pn_chars_u | '0'..'9') ~ (pn_chars)* }

// [144s]	LANGTAG	::=	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
langtag = @{ "@" ~ ('a'..'z' | 'A'..'Z')+ ~ ("-" ~ ('a'..'z' | 'A'..'Z' | '0'..'9')+)* }

// [19]	INTEGER	::=	[+-]? [0-9]+
integer = @{ ("+" | "-")? ~ ('0'..'9')+ }

// [20]	DECIMAL	::=	[+-]? [0-9]* '.' [0-9]+
decimal = @{ ("+" | "-")? ~ ('0'..'9')* ~ "." ~ ('0'..'9')+ }

// [21]	DOUBLE	::=	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
double = @{ ("+" | "-")? ~ (('0'..'9')+ ~ "." ~ ('0'..'9')* ~ exponent) | ("." ~ ('0'..'9')+ ~ exponent) | ('0'..'9')+ ~ exponent }

// [154s]	EXPONENT	::=	[eE] [+-]? [0-9]+
exponent = @{ ("e" | "E") ~ ("+" | "-")? ~ ('0'..'9') }

// [22]	STRING_LITERAL_QUOTE	::=	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
string_literal_quote = @{ "\"" ~ (!("\u{22}" | "\u{5C}" | "\u{0A}" | "\u{0D}") ~ any | echar | uchar)* ~ "\"" }

// [23]	STRING_LITERAL_SINGLE_QUOTE	::=	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
string_literal_single_quote = @{ "'" ~ (!("\u{27}" | "\u{5C}" | "\u{0A}" | "\u{0D}") ~ any | echar | uchar)* ~ "'" }

// [24]	STRING_LITERAL_LONG_SINGLE_QUOTE	::=	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
string_literal_long_single_quote = @{ "'''" ~ (("'" | "''")? ~ (!("'" | "\\") ~ any | echar | uchar))* ~ "'''" }

// [25]	STRING_LITERAL_LONG_QUOTE	::=	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
string_literal_long_quote = @{ "\"\"\"" ~ (("\"" | "\"\"")? ~ (!("\"" | "\\") ~ any | echar | uchar))* ~ "\"\"\"" }

// [26]	UCHAR	::=	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
uchar = @{
  ("\\u" ~ hex ~ hex ~ hex ~ hex) |
  ("\\U" ~ hex ~ hex ~ hex ~ hex ~ hex ~ hex ~ hex ~ hex)
}

// [159s]	ECHAR	::=	'\' [tbnrf"'\]
echar = @{ "\\" ~ ( "t" | "b" | "n" | "r" | "f" | "\"" | "'" | "\\" ) }

// [161s]	WS	::=	#x20 | #x9 | #xD | #xA /* #x20=space #x9=character tabulation #xD=carriage return #xA=new line */
ws = _{ "\u{20}" | "\u{09}" | "\u{0D}" | "\u{0A}" }

// [162s]	ANON	::=	'[' WS* ']'
anon = @{ "[" ~ ws* ~ "]" }

// [163s]	PN_CHARS_BASE	::=	[A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
pn_chars_base = @{
  'A'..'Z' |                // [A-Z]
  'a'..'z' |                // [a-z]
  '\u{00C0}'..'\u{00D6}' |  // [#x00C0-#x00D6]
  '\u{00D8}'..'\u{00F6}' |  // [#x00D8-#x00F6]
  '\u{00F8}'..'\u{02FF}' |  // [#x00F8-#x02FF]
  '\u{0370}'..'\u{037D}' |  // [#x0370-#x037D]
  '\u{037F}'..'\u{1FFF}' |  // [#x037F-#x1FFF]
  '\u{200C}'..'\u{200D}' |  // [#x200C-#x200D]
  '\u{2070}'..'\u{218F}' |  // [#x2070-#x218F]
  '\u{2C00}'..'\u{2FEF}' |  // [#x2C00-#x2FEF]
  '\u{3001}'..'\u{D7FF}' |  // [#x3001-#xD7FF]
  '\u{F900}'..'\u{FDCF}' |  // [#xF900-#xFDCF]
  '\u{FDF0}'..'\u{FFFD}' |  // [#xFDF0-#xFFFD]
  '\u{10000}'..'\u{EFFFF}'  // [#x10000-#xEFFFF]
}

// [164s]	PN_CHARS_U	::=	PN_CHARS_BASE | '_'
pn_chars_u = @{ pn_chars_base | "_" }

// [166s]	PN_CHARS	::=	PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
pn_chars = @{ pn_chars_u | "-" | '0'..'9' | "\u{00B7}" | '\u{0300}'..'\u{036F}' | '\u{203F}'..'\u{2040}' }

// [167s]	PN_PREFIX	::=	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
// TODO:Fix me
pn_prefix = @{ pn_chars_base ~ (pn_chars)* }

// [168s]	PN_LOCAL	::=	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
// TODO:Fix me
pn_local = @{ (pn_chars_u | ":" | '0'..'9' | plx) ~ (pn_chars | ":" | plx)* }

// [169s]	PLX	::=	PERCENT | PN_LOCAL_ESC
plx = @{ percent | pn_local_esc }

// [170s]	PERCENT	::=	'%' HEX HEX
percent = @{ "%" ~ hex ~ hex }

// [171s]	HEX	::=	[0-9] | [A-F] | [a-f]
hex = @{ '0'..'9' | 'A'..'F' | 'a'..'f' }

// [172s]	PN_LOCAL_ESC	::=	'\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')
pn_local_esc = @{ "\\" ~ ("_" | "~" | "." | "-" | "!" | "$" | "&" | "'" | "(" | ")" | "*" | "+" | "," | ";" | "=" | "/" | "?" | "#" | "@" | "%") }
